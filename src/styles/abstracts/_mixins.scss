@mixin color-font {
	color: $color-black;
	zoom: 1;
	opacity: .54;
	filter: alpha(opacity=54); //IE8
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}

/*--- Miscellaneous Mixins & Classes ----*/

// Here's an example of how to use one of these mixins:
// .box { @include border-radius(10); }
// 10 is the variable that replaces the placeholder value

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;
}

@mixin border-top-radius($radius) {
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
	background-clip: padding-box;
}

@mixin border-right-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
	background-clip: padding-box;
}

@mixin border-left-radius($radius) {
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
	background-clip: padding-box;
}

@mixin transition($animation) {
	-webkit-transition: $animation;
	-moz-transition: $animation;
	-o-transition: $animation;
	transition: $animation;
}

@mixin background-size($size) {
	-webkit-background-size: $size;
	-moz-background-size: $size;
	-ms-background-size: $size;
	-o-background-size: $size;
	background-size: $size;
}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin background-clip($cliptype){
	-webkit-background-clip: $cliptype;
	-moz-background-clip: $cliptype;
	background-clip: $cliptype;
}

@mixin rotation($degrees) {
	-webkit-transform: rotate($degrees);
	-ms-transform: rotate($degrees);
	-moz-transform: rotate($degrees);
	-o-transform: rotate($degrees);
	transform: rotate($degrees);
}

@mixin transform-origin($percentage) {
	-webkit-transform-origin: $percentage;
	-moz-transform-origin: $percentage;
	-ms-transform-origin: $percentage;
	-o-transform-origin: $percentage;
	transform-origin: $percentage;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
	-webkit-box-shadow: inset $top $left $blur $color;
	-moz-box-shadow: inset $top $left $blur $color;
	box-shadow: inset $top $left $blur $color;
  } @else {
	-webkit-box-shadow: $top $left $blur $color;
	-moz-box-shadow: $top $left $blur $color;
	box-shadow: $top $left $blur $color;
  }
}

@mixin scale($scale: 1) {
	-webkit-transform: scale($scale);
	-moz-transform: scale($scale);
	-ms-transform: scale($scale);
	-o-transform: scale($scale);
	transform: scale($scale);
}

@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 5
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}

@mixin placeholder {
	&::-webkit-input-placeholder {
		@content
	}
	&:-moz-placeholder {
		@content
	}
	&::-moz-placeholder {
		@content
	}
	&:-ms-input-placeholder {
		@content
	}
}

@mixin radial-gradient($from, $to) {
	background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
	background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: radial-gradient(center, circle cover, $from 0%, $to 100%);
	background-color: $from;
}

@mixin linear-gradient($angle, $color-stops...) {
  $_angle-with-vendor-prefix: "";
  $_angle: "";
  @if $angle == "to top" or $angle == "bottom" {
	$_angle-with-vendor-prefix: bottom;
	$_angle: to top;
  } @else if $angle == "to right" or $angle == "left" {
	$_angle-with-vendor-prefix: left;
	$_angle: to right;
  } @else if $angle == "to bottom" or $angle == "top" {
	$_angle-with-vendor-prefix: top;
	$_angle: to bottom;
  } @else if $angle == "to left" or $angle == "right" {
	$_angle-with-vendor-prefix: right;
	$_angle: to left;
  } @else if $angle == "to top right" or $angle == "bottom left" {
	$_angle-with-vendor-prefix: bottom left;
	$_angle: to top right;
  } @else if $angle == "to bottom right" or $angle == "top left" {
	$_angle-with-vendor-prefix: top left;
	$_angle: to bottom right;
  } @else if $angle == "to bottom left" or $angle == "top right" {
	$_angle-with-vendor-prefix: top right;
	$_angle: to bottom left;
  } @else if $angle == "to top left" or $angle == "bottom right" {
	$_angle-with-vendor-prefix: bottom right;
	$_angle: to top left;
  } @else {
	$_angle-with-vendor-prefix: $angle % 360;
	$_angle: (90 - $angle) % 360;
  }
  background: -webkit-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -moz-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -o-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: linear-gradient($_angle, $color-stops);
}


// This mixin ensures cross browser opacity all the way down to Internet Explorer 5. Though if you have to optomize for IE5, you have a lot bigger problems than opacity, godspeed my friend.
@mixin opacity($opacity) {
	zoom: 1;
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}


// Rem is similar to the em value, but instead of being relative to the parent element itâ€™s relative to the font-size set in the <html>.
// It has all the benefits of em but you donâ€™t get issues with e.g (compounding) since rem is only relative to the html element. The bad part is thereâ€™s no support for rem units in IE8 and below. But with this mixin we can create a fallback to pixels when rem isnâ€™t supported.

// Usage
//     p {
//         @include font-size(14px)
//     }
	
// Output
//     p {
//         @include font-size(14px); //Will be overridden if browser supports rem
//         font-size: 0.8rem;
//     }



@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin font-size-important($size) {
	font-size: $size !important;
	font-size: calculateRem($size) !important;
}



// This mixin depends on Modernizr and creates a bit more work for you when creating images for your site, but itâ€™s really worth it in the end.
// You need one .svg file, that will serve as the default background image. Youâ€™ll also need a regular .png that serves as a fallback for non-svg-supporting browsers. And last you need a twice as large .png as a second fallback to retina screens.
// All in all you need this:

// pattern.svg
// pattern.png
// pattern@2x.png

$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';

@mixin background-image($name, $size:false){
	background-image: url(#{$image-path}/#{$name}.svg);
	@if($size){
		background-size: $size;
	}
	.no-svg &{
		background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

		@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
		  background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
		}
	}
}




// Animations are always a pain to create with all the vendor prefixes and what not. But with the help of this mixin it will boil down to just a few lines of code.
// @include keyframes(slide-down) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }

// .element {
//   width: 100;
//   height: 100;
//   background: black;
//   @include animation('slide-down 5s 3');
// }

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}  
	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin animation($str) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};
}

@mixin appearance($app) {
	-webkit-appearance: $app;
	-moz-appearance: $app;
	appearance: $app;
}

@mixin columns($number) {
	-webkit-columns: $number;
	-moz-columns: $number;
	columns: $number;
}

@mixin no-select {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin filter-gradient($color1, $color2, $direction){
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2',GradientType=$direction);
}


@mixin line-clamp($lines, $line-height) {
	.line-clamp--#{$lines} {
		-webkit-line-clamp: $lines;
		height: 1rem * $line-height * $lines;
		&:after {
			top: 1rem * $line-height * ($lines - 1);
		}
	}
	-webkit-line-clamp: $lines;
	height: 1rem * $line-height * $lines;
	&:after {
		top: 1rem * $line-height * ($lines - 1);
	}
}
